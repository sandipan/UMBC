(* ::Package:: *)

(* ::Input:: *)
(*(*---------------------------------------------------------------------------------*)*)
(*(*---------------- Sandipan Dey, UMBC CSEE ----------------------------------------*)*)
(*(*---------------- The Source Code for Quantum Density Package --------------------*)*)
(*(*---------------- Functions --------------------------------------------------------*)
(*				1. ComputeOrthonormalEigenSpaces *)
(*                2. ComputeProjectors *)
(*                3. ComputeProbStatesDensity*)
(*                4. ShowOutputTablesDensity*)
(*                5. MeasureQuantumSystemDensity                 *)
(*-----------------------------------------------------------------------------*)*)
(**)
(*BeginPackage["QuantumDensity`"]*)
(**)
(*Begin["`Private`"]*)
(**)
(*(* ComputeOrthonormalEigenSpaces: Computes the Orthonormal EigenSpaces *)*)
(*(* Inputs \[Implies] \[CapitalOmega]: The Obserrvable *)*)
(*(* Output \[Implies] EigenValues, EigenVectros and the Dimensions of the EigenSpaces *)*)
(*ComputeOrthonormalEigenSpaces[\[CapitalOmega]_] := Module[{n, \[CapitalLambda], V,\[CapitalLambda]o, Vo, i},*)
(*n=Dimensions[\[CapitalOmega]][[1]];(*\[CapitalOmega] Square Matrix*)*)
(*{\[CapitalLambda],V}=Eigensystem[\[CapitalOmega]];(*Find EigenValues and Orthogonal EigenVectors*)*)
(*(*Construct Orthonormal EigenKets in the respective EigenSpaces*)*)
(*Clear[\[CapitalLambda]o]; Do[\[CapitalLambda]o[\[CapitalLambda][[i]]]= \[CapitalLambda][[i]],{i,n}];*)
(*Clear[Vo]; Do[Vo[\[CapitalLambda][[i]]]= {},{i,n}]; Do[Vo[\[CapitalLambda][[i]]]=Append[Vo[\[CapitalLambda][[i]]],V[[i]]],{i,n}]; *)
(*Do[If[Dimensions[Vo[\[CapitalLambda][[i]]]][[1]]==1,Vo[\[CapitalLambda][[i]]]= {Normalize[Vo[\[CapitalLambda][[i]]][[1]]]},Vo[\[CapitalLambda][[i]]]= Orthogonalize[Vo[ \[CapitalLambda][[i]]]]],{i,n}];*)
(*\[CapitalLambda]=DownValues[\[CapitalLambda]o][[All,2]];V=DownValues[Vo][[All,2]]; n=Dimensions[\[CapitalLambda]][[1]];(*Dimension of Eigen Space*)*)
(*{\[CapitalLambda], V, n}*)
(*];*)
(**)
(*(* ComputeProjectors: Computes the Projectors *)*)
(*(* Inputs \[Implies] V: EigenSpace buckets containing orthonormal eignevectors, n: Dimension of the EigenSpace *)*)
(*(* Output \[Implies] n Projectors *)*)
(*ComputeProjectors[V_,n_] := Module[{P, pVerify, oVerify, i, j, ZeroMatrix, ket, braw, m, p, Pr},*)
(*  pVerify = oVerify = True;*)
(*  P = Table[0, {i,  n}, {j, 1}];*)
(*  Do[{m, p} = Dimensions[V[[i]]]; P[[i]]= Table[0,{r,p},{c,p}];*)
(*          Do[ket = {V[[i]][[j]]}\[Transpose]; braw = ket\[ConjugateTranspose]; Pr = ket.braw; If [Pr.Pr !=  Pr, pVerify = False, ] ; P[[i]] = P[[i]] + Pr,{j,m}],{i,n}];*)
(*          ZeroMatrix= Table[0, {i, p}, {j,p}];Do[Do[If[P[[i]].P[[j]]!=ZeroMatrix   and i !=   j,oVerify = False,],{i,n}],{j,n}]; (*Verify Kronecker*)*)
(*  {P, pVerify}*)
(*];*)
(**)
(*(* ComputeProbStates: Computes the Probabilities and the States *)*)
(*(* Inputs \[Implies] P: n Projectors, \[Rho]: Density Operator, n: Dimension of the EigenSpace *)*)
(*(* Output \[Implies] n Probabilities and the States *)*)
(*ComputeProbStatesDensity[P_,\[Rho]_,n_] := Module[{prob, state, i},*)
(*prob=Table[Expand[Tr[P[[i]].\[Rho]]],{i,n}]; (*Probabilities*)*)
(*state=Table[Map[Simplify,Expand[P[[i]].\[Rho].P[[i]] / Tr[P[[i]].\[Rho]]]],{i,n}]; (*States*)  *)
(*{prob, state}*)
(*];*)
(**)
(*(* ShowOutputTablesDensity: Shows the Output Tables *)*)
(*(* Inputs \[Implies] \[CapitalOmega]: The Obserrvable, \[CapitalLambda]: EigenValues, V: EigenSpace buckets containing orthonormal eignevectors, P: Projectors, \[Rho]: The Density Operator, *)
(*			prob: Probabilities, state: States, n: Dimension of the EigenSpace *)*)
(*(* Output \[Implies] None *)*)
(*ShowOutputTablesDensity[\[CapitalOmega]_,\[Rho]_,\[CapitalLambda]_,V_,P_,prob_,state_, n_, pVerify_, si_, sv_, so_] := Module[{inputTable, verifyTable, outputTable, i, j, k},*)
(*     inputTable = Table[Switch[i,  1, Switch[j, 1, "Observable", 2, "Density Operator", 3, "Trace(\[Rho].\[Rho])"],*)
(*						                 2, Switch[j, 1, MatrixForm[\[CapitalOmega]], 2, MatrixForm[\[Rho]], 3,  Tr[\[Rho].\[Rho]]], *)
(*						                 3, Switch[j, 1,"", 2, "", 3, If[Tr[\[Rho].\[Rho]] !=  1, "Mixed ensemble", "Pure ensemble"]]],*)
(*		      {i,3},{j, 3}];*)
(*        verifyTable = Table[If[k == 1, Switch[j, 1, "\[Sum]P = I", 2, "\[Sum]\[Lambda]P = \[CapitalOmega]", 3, "\!\(\*SubscriptBox[\"P\", \"i\"]\).\!\(\*SubscriptBox[\"P\", \"i\"]\) = \!\(\*SubscriptBox[\"P\", \"i\"]\)", 4, "\[Sum]p = 1", 5, "\!\(\*SubscriptBox[\"P\", \"i\"]\).\!\(\*SubscriptBox[\"P\", \"j\"]\)=0, i\[NotEqual]j" ],*)
(*		                                                 Switch[j, 1, Sum[P[[i]],{i,n}]== IdentityMatrix[Dimensions[P][[2]]], *)
(*					                                         2, Sum[\[CapitalLambda][[i]]*P[[i]],{i,n}] ==\[CapitalOmega], *)
(*					                                         3, pVerify, *)
(*					                                         4, If[Sum[prob[[i]],{i,n}]==1, True, False],*)
(*					                                         5, True]],*)
(*						 {k,2},{j, 5}];*)
(*      outputTable =  Table[If[i == 0, Switch[j, 1, "EigenValue", 2, "EigenSpace", 3, "Projector", 4, "Probability", 5, "State"],*)
(*		                                                   Switch[j, 1, \[CapitalLambda][[i]], 2, MatrixForm[V[[i]]\[Transpose]], 3, MatrixForm[P[[i]]], 4, prob[[i]], 5, MatrixForm[state[[i]]]]], *)
(*				{i,0, n},{j, 5}];     	*)
(* (* Show Outputs *)*)
(*   Grid[inputTable,Alignment-> Center,Spacings->{si,1},Frame->All,ItemStyle->"Text",Background->{{None,None},{Red,None}}]*)
(*   Grid[verifyTable,Alignment-> Center,Spacings->{sv,1},Frame->All,ItemStyle->"Text",Background->{{None,None},{None,None}}]*)
(*   Grid[outputTable,Alignment-> Center,Spacings->{so,1},Frame->All,ItemStyle->"Text",Background->{{None,None},{Blue,None}}]*)
(*   ];*)
(**)
(*(* MeasureQuantumSystemDensity: Measures the Quantum System with the Observable *)*)
(*(* Inputs \[Implies] \[CapitalOmega]: The Obserrvable, \[CapitalPsi]: The Density Operator *)*)
(*(* Output \[Implies] None *)*)
(*MeasureQuantumSystemDensity[\[CapitalOmega]_,\[Rho]_, si_: 10, sv_: 5, so_:4] := Module[{\[CapitalLambda],V, n, P, prob, state, pVerify, oVerify},*)
(*(* Compute Orthonormal EigenSpaces *)*)
(*{\[CapitalLambda],V, n}= ComputeOrthonormalEigenSpaces[\[CapitalOmega]];*)
(*(* Compute Projectors *)*)
(*{P, pVerify} = ComputeProjectors[V, n];*)
(*(* Compute Probabilities and States *)*)
(*{prob, state} = ComputeProbStatesDensity[P,\[Rho],n];*)
(*(* Get Output Tables *)*)
(*ShowOutputTablesDensity[\[CapitalOmega],\[Rho],\[CapitalLambda],V,P,prob,state,n, pVerify, si, sv, so]*)
(*];*)
(**)
(*(*----------- Inputs ----------*)*)
(*(*Example 1*)*)
(*  \[Rho]={{1/4,-I/12,1/12,I/12}, {I/12,1/4,-I/12,1/12}, {1/12,I/12,1/4,-I/12},{-I/12, 1/12,I/12,1/4}};(*Density Operator*)*)
(*  \[CapitalOmega]={{0,-1,-I, 0}, {-1,0,0, I}, {I,0,0, 1},{0, -I,1, 0}};(*Observable*) *)
(*MeasureQuantumSystemDensity[\[CapitalOmega],\[Rho]]*)
(*(*Ex (a)*)*)
(* \[Rho]={{1/4,-I/12,1/12,I/12}, {I/12,1/4,-I/12,1/12}, {1/12,I/12,1/4,-I/12},{-I/12, 1/12,I/12,1/4}};(*Density Operator*)*)
(* \[CapitalOmega]={{0,0,1,-I}, {0,0,I,-1}, {1,-I,0,0},{I,-1,0,0}};(*Observable*) *)
(*MeasureQuantumSystemDensity[\[CapitalOmega],\[Rho]]*)
(*(*Ex (b)*)*)
(*  \[Rho]={{1/4,-I/12,1/12,I/12}, {I/12,1/4,-I/12,1/12}, {1/12,I/12,1/4,-I/12},{-I/12, 1/12,I/12,1/4}};(*Density Operator*)*)
(*  \[CapitalOmega]={{2,0,0,I}, {0,2,0,0}, {0,0,2,0},{-I,0,0,2}};(*Observable*) *)
(*MeasureQuantumSystemDensity[\[CapitalOmega],\[Rho]]*)
(*(*Ex (c)*)*)
(*  \[Rho]={{1/4,-I/12,1/12,I/12}, {I/12,1/4,-I/12,1/12}, {1/12,I/12,1/4,-I/12},{-I/12, 1/12,I/12,1/4}};(*Density Operator*)*)
(*  \[CapitalOmega]={{5,0,0,3I}, {0,5,I,0}, {0,-I, 5, 0},{-3I,0,0,5}};(*Observable*) *)
(*MeasureQuantumSystemDensity[\[CapitalOmega],\[Rho]]*)
(**)
(*End[]*)
(**)
(*EndPackage[]*)
